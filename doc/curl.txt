       -d, --data <data>
              (HTTP)  Sends  the  specified data in a POST request to the HTTP server, in the same way that a browser does when a user has filled in an HTML form and presses the submit button. This will cause curl to pass the data to the server using the content-
              type application/x-www-form-urlencoded.  Compare to -F, --form.

              -d, --data is the same as --data-ascii. --data-raw is almost the same but does not have a special interpretation of the @ character. To post data purely binary, you should instead use the --data-binary option.  To URL-encode  the  value  of  a  form
              field you may use --data-urlencode.

              If  any  of  these  options  is  used  more  than  once  on  the same command line, the data pieces specified will be merged together with a separating &-symbol. Thus, using '-d name=daniel -d skill=lousy' would generate a post chunk that looks like
              'name=daniel&skill=lousy'.

              If you start the data with the letter @, the rest should be a file name to read the data from, or - if you want curl to read the data from stdin. Multiple files can also be specified. Posting data from a file named 'foobar' would thus be  done  with
              --data @foobar. When --data is told to read from a file like that, carriage returns and newlines will be stripped out. If you don't want the @ character to have a special interpretation use --data-raw instead.

       --data-ascii <data>
              See -d, --data.

       --data-binary <data>
              (HTTP) This posts data exactly as specified with no extra processing whatsoever.

              If you start the data with the letter @, the rest should be a filename.  Data is posted in a similar manner as --data-ascii does, except that newlines and carriage returns are preserved and conversions are never done.

              If this option is used several times, the ones following the first will append data as described in -d, --data.

       --data-raw <data>
              (HTTP) This posts data similarly to --data but without the special interpretation of the @ character. See -d, --data.  (Added in 7.43.0)

       --data-urlencode <data>
              (HTTP) This posts data, similar to the other --data options with the exception that this performs URL-encoding. (Added in 7.18.0)

              To be CGI-compliant, the <data> part should begin with a name followed by a separator and a content specification. The <data> part can be passed to curl using one of the following syntaxes:

              content
                     This will make curl URL-encode the content and pass that on. Just be careful so that the content doesn't contain any = or @ symbols, as that will then make the syntax match one of the other cases below!

              =content
                     This will make curl URL-encode the content and pass that on. The preceding = symbol is not included in the data.

              name=content
                     This will make curl URL-encode the content part and pass that on. Note that the name part is expected to be URL-encoded already.

              @filename
                     This will make curl load data from the given file (including any newlines), URL-encode that data and pass it on in the POST.

              name@filename
                     This will make curl load data from the given file (including any newlines), URL-encode that data and pass it on in the POST. The name part gets an equal sign appended, resulting in name=urlencoded-file-content. Note that the name is  expected
                     to be URL-encoded already.

       -F, --form <name=content>
              (HTTP) This lets curl emulate a filled-in form in which a user has pressed the submit button. This causes curl to POST data using the Content-Type multipart/form-data according to RFC 2388. This enables uploading of binary files etc.  To  force  the
              'content' part to be a file, prefix the file name with an @ sign. To just get the content part from a file, prefix the file name with the symbol <. The difference between @ and < is then that @ makes a file get attached in the post as a file upload,
              while the < makes a text field and just get the contents for that text field from a file.

              Example, to send your password file to the server, where 'password' is the name of the form-field to which /etc/passwd will be the input:

              curl -F password=@/etc/passwd www.mypasswords.com

              To read content from stdin instead of a file, use - as the filename. This goes for both @ and < constructs. Unfortunately it does not support reading the file from a named pipe or similar, as it needs the full size before the transfer starts.

              You can also tell curl what Content-Type to use by using 'type=', in a manner similar to:

              curl -F "web=@index.html;type=text/html" url.com

              or

              curl -F "name=daniel;type=text/foo" url.com

              You can also explicitly change the name field of a file upload part by setting filename=, like this:

              curl -F "file=@localfile;filename=nameinpost" url.com

              If filename/path contains ',' or ';', it must be quoted by double-quotes like:

              curl -F "file=@\"localfile\";filename=\"nameinpost\"" url.com

              or

              curl -F 'file=@"localfile";filename="nameinpost"' url.com

              Note that if a filename/path is quoted by double-quotes, any double-quote or backslash within the filename must be escaped by backslash.

              See further examples and details in the MANUAL.

              This option can be used multiple times.
